#!/usr/bin/env python
import rospy
import numpy
from sensor_msgs.msg import Joy
from std_msgs.msg import Float64MultiArray

# Parameters
PARAM_INPUT_TOPIC = '~input_topic'
PARAM_MAX_VELOCITY = '~max_velocity'

# Output topics
OUTTOPIC_OPERATOR_SIGNAL_RAW = 'operator_signal/raw'
OUTTOPIC_OPERATOR_SIGNAL_VEL = 'operator_signal/velocity'

# Joystick/gamepad axis map
AXIS_X = 0
AXIS_Y = 1

class OperatorNode:

    def __init__(self):

        # Grab input topic
        input_topic = rospy.get_param(PARAM_INPUT_TOPIC, 'joy')

        # Grab max velocity
        self.max_velocity = rospy.get_param(PARAM_MAX_VELOCITY)

        # Create publishers
        self.pub_raw = rospy.Publisher(OUTTOPIC_OPERATOR_SIGNAL_RAW, Float64MultiArray, queue_size=1)
        self.pub_vel = rospy.Publisher(OUTTOPIC_OPERATOR_SIGNAL_VEL, Float64MultiArray, queue_size=1)

        # Subscribe to joy node
        rospy.Subscriber(input_topic, Joy, self.callback)

    def callback(self, msg):
        """Listens for Joy messages and publishes raw operator signals and velocity operator signals."""

        # Extract raw operator signal
        operator_signal_raw = [msg.axes[AXIS_X],
                               msg.axes[AXIS_Y]]

        # Compute velocity
        operator_signal_vel = [self.max_velocity * operator_signal_raw[0],
                               self.max_velocity * operator_signal_raw[1]]

        # Publish raw and velocity operator signal
        self.pub_raw.publish(
            Float64MultiArray(data=operator_signal_raw)
        )

        self.pub_vel.publish(
            Float64MultiArray(data=operator_signal_vel)
        )

if __name__=='__main__':
    rospy.init_node('operator_node', anonymous=True)
    OperatorNode()
    rospy.spin()
